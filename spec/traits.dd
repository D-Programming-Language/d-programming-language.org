Ddoc

$(SPEC_S Traits,

	$(P Traits are extensions to the language to enable
	programs, at compile time, to get at information
	internal to the compiler. This is also known as
	compile time reflection.
	It is done as a special, easily extended syntax (similar
	to Pragmas) so that new capabilities can be added
	as required.
	)

$(GRAMMAR
$(GNAME TraitsExpression):
    $(D __traits) $(D $(LPAREN)) $(GLINK TraitsKeyword) $(D ,) $(GLINK TraitsArguments) $(D $(RPAREN))

$(GNAME TraitsKeyword):

{{ traitsList}}

$(GNAME TraitsArguments):
    $(GLINK TraitsArgument)
    $(GLINK TraitsArgument) $(D ,) $(I TraitsArguments)

$(GNAME TraitsArgument):
    $(GLINK2 expression, AssignExpression)
    $(GLINK2 declaration, Type)
)

$(P Additionally special keywords are provided for debugging purposes:)

$(GRAMMAR
$(GNAME SpecialKeyword):
    $(D $(RELATIVE_LINK2 specialkeywords, __FILE__))
    $(D $(RELATIVE_LINK2 specialkeywords, __FILE_FULL_PATH__))
    $(D $(RELATIVE_LINK2 specialkeywords, __MODULE__))
    $(D $(RELATIVE_LINK2 specialkeywords, __LINE__))
    $(D $(RELATIVE_LINK2 specialkeywords, __FUNCTION__))
    $(D $(RELATIVE_LINK2 specialkeywords, __PRETTY_FUNCTION__))
)

{{ traitsListFull }}

$(H2 $(LNAME2 specialkeywords, Special Keywords))

    $(P $(CODE __FILE__) and $(CODE __LINE__) expand to the source
    file name and line number at the point of instantiation. The path of
    the source file is left up to the compiler. )

    $(P $(CODE __FILE_FULL_PATH__) expands to the absolute source
    file name at the point of instantiation.)

    $(P $(CODE __MODULE__) expands to the module name at the point of
    instantiation.)

    $(P $(CODE __FUNCTION__) expands to the fully qualified name of the
    function at the point of instantiation.)

    $(P $(CODE __PRETTY_FUNCTION__) is similar to $(CODE __FUNCTION__),
    but also expands the function return type, its parameter types,
    and its attributes.)

    $(P Example usage:)

-----
module test;
import std.stdio;

void test(string file = __FILE__, size_t line = __LINE__, string mod = __MODULE__,
          string func = __FUNCTION__, string pretty = __PRETTY_FUNCTION__, string fileFullPath = __FILE_FULL_PATH__)
{
    writefln("file: '%s', line: '%s', module: '%s',\nfunction: '%s', pretty function: '%s',\nfile full path: '%s'",
             file, line, mod, func, pretty, fileFullPath);
}

int main(string[] args)
{
    test();
    return 0;
}
-----

	$(P Assuming the file was at /example/test.d, this will output:)

$(CONSOLE
file: 'test.d', line: '13', module: 'test',
function: 'test.main', pretty function: 'int test.main(string[] args)',
file full path: '/example/test.d'
)

)

Macros:
	TITLE=Traits
	GBLINK=$(RELATIVE_LINK2 $0, $(D $0))
