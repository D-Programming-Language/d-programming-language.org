Ddoc

$(SPEC_S Contract Programming,

$(HEADERNAV_TOC)

        $(P Contracts are a breakthrough technique to reduce the programming effort
        for large projects. Contracts are the concept of preconditions, postconditions,
        errors, and invariants.
        )

        $(P Building contract support into the language makes for:)

        $(OL
        $(LI a consistent look and feel for the contracts)
        $(LI tool support)
        $(LI it's possible the compiler can generate better code using information gathered
        from the contracts)
        $(LI easier management and enforcement of contracts)
        $(LI handling of contract inheritance)
        )

$(HTMLTAG3V img, src="$(ROOT_DIR)images/d4.gif" style="max-width:100%" alt="Contracts make D bug resistant" border="0")

        $(P The idea of a contract is simple - it's just an expression that must evaluate to true.
        If it does not, the contract is broken, and by definition, the program has a bug in it.
        Contracts form part of the specification for a program, moving it from the documentation
        to the code itself. And as every programmer knows, documentation tends to be incomplete,
        out of date, wrong, or non-existent. Moving the contracts into the code makes them
        verifiable against the program.)

$(H2 $(LNAME2 assert_contracts, Assert Contract))

        $(P The most basic contract is the
        $(GLINK2 expression, AssertExpression).
        An $(B assert) declares an expression that must evaluate to true, with an
        optional failure string as a second argument:)
------
assert(expression);
assert(expression, "message to display on failure");
------
        $(P As a contract, an $(D assert) represents a guarantee that the code
        $(I must) uphold. Any failure of this expression represents a logic
        error in the code that must be fixed in the source code.  A program for
        which the assert contract is false is, by definition, invalid.)

        $(P As a debugging aid, the compiler may insert a runtime check to
        verify that the expression is indeed true.  If it is false, an
        `AssertError` is thrown.  When compiling for release, this check is not
        generated.  The special $(D assert(0)) expression, however, is
        generated even in release mode. See the $(GLINK2 expression, AssertExpression)
        documentation for more information.)

        $(P The compiler is free to assume the assert expression is true and
        optimize subsequent code accordingly.)

        $(UNDEFINED_BEHAVIOR The subsequent execution of the program after an
        assert contract is false.)

$(H2 $(LNAME2 pre_post_contracts, Pre and Post Contracts))

        $(P The pre contracts specify the preconditions before a statement is executed. The most
        typical use of this would be in validating the parameters to a function. The post
        contracts validate the result of the statement. The most typical use of this
        would be in validating the return value of a function and of any side effects it has.
        In D, pre contracts begin with `in`, and post contracts begin with `out`. They
        come at the end of the function signature and before the opening brace of the function body.)

        $(P Pre and post contracts can be written either in expression form (feature introduced in DMD
        2.081.0), with a syntax similar to $(B assert), or as block statements
        containing arbitrary code.)

        $(P The expression form is:)
------
in (expression)
in (expression, "failure string")
out (identifier; expression)
out (identifier; expression, "failure string")
out (; expression)
out (; expression, "failure string")
{
    ...function body...
}
------
        $(P The block statement form is:)
------
in
{
    ...contract preconditions...
}
out
{
    ...contract postconditions...
}
out (identifier)
{
    ...contract postconditions...
}
do
{
    ...function body...
}
------

        $(P The optional identifier in either type of `out` contract is set to the return value
        of the function.)

        $(P By definition, if $(B all) pre contract fails, then the function received bad
        parameters. If $(B any) post contract fails, then there is a bug in the function.
        In other words, the results of pre contracts are $(B or)-ed together; while the results
        of post contracts are $(B and)-ed together.
        If either pre or post contracts fail,
        an `assert` statement within the corresponding `in` or `out` block will throw an
        `AssertError`.)

        $(P The keyword `do` can be used to announce the function body. Although any number
        of pre or post contracts of any form may follow each other, `do` is
        required only when the last contract before the body is a block statement.
        (Before the acceptance of
        $(LINK2 https://github.com/dlang/DIPs/blob/master/DIPs/accepted/DIP1003.md, DIP1003),
        the keyword `body` was required instead of `do`, and may still be encountered in
        old code bases. In the long term, `body` may be deprecated, but for now it's allowed both
        as a keyword in this context and as an identifier elsewhere, although `do` is preferred.) )

        $(P Though any arbitrary D code is allowed in the `in` and `out` contract blocks,
        their only function should be to verify incoming and outgoing data. It is important
        to ensure that the
        code has no side effects, and that the release version of the code
        will not depend on any  effects of the code.
        For a release build of the code, `in` and `out` contracts are not
        inserted.)

        $(P Here is an example function in both forms:)

------
int fun(ref int a, int b)
in (a > 0)
in (b >= 0, "b cannot be negative!")
out (r; r > 0, "return must be positive")
out (; a != 0)
{
    // function body
}

int fun(ref int a, int b)
in
{
    assert(a > 0);
    assert(b >= 0, "b cannot be negative!");
}
out (r)
{
    assert(r > 0, "return must be positive");
    assert(a != 0);
}
do
{
    // function body
}
------

        $(P The two functions are almost identical semantically. The expressions in the
        first are lowered to contract blocks that look almost exactly like the second,
        except that a separate block is created for each expression in the first, thus
        avoiding shadowing variable names.)

$(H2 $(LNAME2 in_out_inheritance, In, Out and Inheritance))

        $(P If a function in a derived class overrides a function from its
        super class, then only one of
        the $(D in) contracts of the function and its base functions
        must be satisfied.
        Overriding
        functions then becomes a process of $(I loosening) the $(D in)
        contracts.
        )

        $(P A function without an $(D in) contract means that any values
        of the function parameters are allowed. This implies that if any
        function in an inheritance hierarchy has no $(D in) contract,
        then any $(D in) contracts on functions overriding it have no useful
        effect.
        )

        $(P Conversely, all of the $(D out) contracts need to be satisfied,
        so overriding functions becomes a processes of $(I tightening) the
        $(D out)
        contracts.
        )

$(H2 $(LNAME2 Invariants, Invariants))

        $(P Invariants are used to specify characteristics of a class or struct that
        must always be true (except while executing a member function).
        For example, a class representing a date might have an invariant that the
        day must be 1..31 and the hour must be 0..23:
        )

------
class Date
{
    int day;
    int hour;

    this(int d, int h)
    {
        day = d;
        hour = h;
    }

    invariant
    {
        assert(1 <= day && day <= 31);
        assert(0 <= hour && hour < 24, "hour out of bounds");
    }
}
------

        $(P Invariant blocks should contain `assert` expressions, and should throw
        `AssertError`s when they fail. Since DMD version 2.081.0,
        invariants can also be written as expression statements, with `assert` implied:
        )

------
    invariant (1 <= day && day <= 31);
    invariant (0 <= hour && hour < 24, "hour out of bounds");
------

        $(P The invariant is a contract saying that the `assert`s must hold true.
        The invariant is checked when a class or struct constructor completes,
        and at the start of the class or struct destructor. For public or exported
        functions, the order of execution is:
        )

        $(OL
        $(LI preconditions)
        $(LI invariant)
        $(LI function body)
        $(LI invariant)
        $(LI postconditions)
        )

        $(P The invariant is not checked if the class or struct is implicitly constructed using
        the default $(CODE .init) value.
        )

        $(P The code in the invariant may not call any public non-static members
        of the class or struct, either directly or indirectly.
        Doing so will result in a stack overflow, as the invariant will wind
        up being called in an infinitely recursive manner.
        )

        $(P Invariants are implicitly `const`.)

        $(P Since the invariant is called at the start of public or
        exported members, such members should not be called from
        constructors.
        )

------
class Foo
{
    public void f() { }
    private void g() { }

    invariant
    {
        f();  // error, cannot call public member function from invariant
        g();  // ok, g() is not public
    }
}
------

        $(P The invariant can be checked with an $(CODE assert()) expression:)

        $(OL
        $(LI classes need to pass a class object)
        $(LI structs need to pass the address of an instance)
        )

------
auto mydate = new Date(); //class
auto s = S();             //struct
...
assert(mydate);           // check that class Date invariant holds
assert(&s);               // check that struct S invariant holds
------

        $(P Class invariants are inherited, that is,
        any class invariant is implicitly in addition to the invariants of its base
        classes.)

        $(P There can be more than one invariant declared per class or struct.)

        $(P When compiling for release, the invariant code is not generated, and the compiled program runs at maximum speed.
        The compiler is free to assume the invariant holds true, regardless of whether code is generated for it or not, and
        may optimize code accordingly.)

$(H2 $(LNAME2 references, References))

        $(LIST
        $(LINK2 https://web.archive.org/web/20080919174640/http://people.cs.uchicago.edu/~robby/contract-reading-list/, Contracts Reading List),
        $(LINK2 http://jan.newmarch.name/java/contracts/paper-long.html, Adding Contracts to Java)
        )

$(SPEC_SUBNAV_PREV_NEXT template-mixin, Template Mixins, version, Conditional Compilation)
)

Macros:
        CHAPTER=23
        TITLE=Contract Programming
