Ddoc

$(SPEC_S Introduction,

$(P D is a general-purpose systems programming language with a C-like syntax that compiles to native code.
It is statically typed and supports both automatic $(LPAREN)garbage collected$(RPAREN) and manual memory management.
D programs are structured as modules that can be compiled separately and linked with external libraries
to create native libraries or executables.)

$(P This document is the reference manual for the D Programming Language. For more information and
other documents$(COMMA) see $(LINK2 https://dlang.org/, The D Language Website).)

$(H2 Environments)

$(P The computer system in which a D program is compiled from source to executable format
will be called the compilation environment and the computer system in which the compiled
D program is executed will be called the execution environment. The compilation environment and
the execution environment need not have the same system architecture.)

$(H2 Program Structure)

$(P A D program is kept in units called source files. Each source file contains a unit of compilation
called the module. D modules need not all be compiled at the same time. Previously compiled
D modules may be individually preserved as object files or in libraries. Modules may be separately
compiled and then later linked to produce an executable program.)

$(H2 Phases of Compilation)

$(P D programs are compiled in multiple phases.)

$(OL

        $(LI $(B Lexical analysis)$(BR)

        The source file is converted into a sequence of tokens. In particular, D programs
        are not passed through a macro-preprocessor prior to compilation.
        )

        $(LI $(B Syntax analysis)$(BR)

        The sequence of tokens is parsed to form syntax trees. The syntax analysis
        phase requires arbitrary lookahead of tokens.
        )

        $(LI $(B Semantic analysis)$(BR)

        The syntax trees are traversed to declare variables, load symbol tables, assign
        types, and in general determine the meaning of the program.
        )

        $(LI $(B Optimization)$(BR)

        Optimization is an optional phase during which the D program is converted into a
        semantically equivalent, but more time and/or space efficient version.
        )

        $(LI $(B Code generation)$(BR)

        Instructions targetted for the execution environment are selected to implement the
        semantics of the D program. The typical result is an object file suitable for input
        to a linker.
        )
)



$(SPEC_SUBNAV_NEXT lex, Lexical)
)

Macros:
TITLE = Introduction
CHAPTER = 1
