Ddoc

$(SPEC_S Introduction,

$(P D is a general-purpose systems programming language with a C-like syntax that compiles to native code.
It is statically typed and supports both automatic $(LPAREN)garbage collected$(RPAREN) and manual memory management.
D programs are structured as modules that can be compiled separately and linked with external libraries
to create native libraries or executables.)

$(P This document is the reference manual for the D Programming Language. For more information and
other documents$(COMMA) see $(LINK2 https://dlang.org/, The D Language Website).)

$(H2 Program Structure)

$(P A D program's unit of compilation is a module; each D source file corresponds to a single D module.
D modules need not all be compiled at the same time. Previously compiled modules may be individually
preserved as object files or in libraries, and later linked to produce an executable program.)

$(H2 Phases of Compilation)

$(P D modules are compiled in multiple phases.)

$(OL

        $(LI $(B Lexical analysis)$(BR)

        The source file is converted into a sequence of tokens. In particular, D programs
        are not pre-processed prior to compilation.
        )

        $(LI $(B Syntax analysis)$(BR)

        The sequence of tokens is parsed to form syntax trees. The syntax analysis
        phase requires arbitrary lookahead of tokens.
        )

        $(LI $(B Semantic analysis)$(BR)

        The syntax trees are traversed to declare variables, load symbol tables, assign
        types, and in general determine the meaning of the program.
        )

        $(LI $(B Optimization)$(BR)

        Optimization is an optional phase during which a D program is converted into a
        semantically equivalent, but more time and/or space efficient version.
        )

        $(LI $(B Code generation)$(BR)

        Instructions targeted for the execution environment are selected to implement the
        semantics of the D program. The typical result is an object file suitable for input
        to a linker.
        )
)



$(SPEC_SUBNAV_NEXT lex, Lexical)
)

Macros:
TITLE = Introduction
CHAPTER = 1
