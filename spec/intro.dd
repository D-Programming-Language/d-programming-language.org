Ddoc

$(SPEC_S Introduction,

$(P D is a general-purpose systems programming language with a C-like syntax that compiles to native code.
It is statically typed and supports both automatic $(LPAREN)garbage collected$(RPAREN) and manual memory management.
D programs are structured as modules that can be compiled separately and linked with external libraries
to create native libraries or executables.)

$(P This document is the reference manual for the D Programming Language. For more information and
other documents$(COMMA) see $(LINK2 https://dlang.org/, The D Language Website).)

$(H2 Conceptual models)

$(H3 Environments)

$(P The data-processing-system in which a D program is translated from source to executable format
will be called the translation environment and the data-processing-system in which the translated
D program is executed will be called the execution environment. The translation environment and
the execution environment need not have the same system architecture.)

$(H3 Program Structure)

$(P A D program is kept in units called source files. Each source file contains a unit of translation
called the module. D modules need not all be translated at the same time. Previously translated
D modules may be individually preserved or in libraries. The separate modules of a program communicate
by calls to functions whose identifers have external linkage, manipulation of objects whose identifers
have external linkage, or manipulation of data files. Modules may be separately translated and then
later linked to produce an executable program.)

$(H3 Translation Phases)

$(P D programs are translated in multiple phases.)

$(OL

        $(LI $(B Lexical analysis)$(BR)

        The source file is translated into a sequence of tokens.
        )

        $(LI $(B Syntax analysis)$(BR)

        The sequence of tokens is parsed to form syntax trees.
        )

        $(LI $(B Semantic analysis)$(BR)

        The syntax trees are traversed to declare variables, load symbol tables, assign
        types, and in general determine the meaning of the program.
        )

        $(LI $(B Code generation)$(BR)

        Following optional optimizations, instructions targetted for the execution
        environment are emitted to implement the semantics of the D program.
        The result is an object file suitable for input to a linker.
        )
)



$(SPEC_SUBNAV_NEXT lex, Lexical)
)

Macros:
TITLE = Introduction
CHAPTER = 1
