Ddoc

$(SPEC_S Pragmas,

$(HEADERNAV_TOC)

$(GRAMMAR
$(GNAME PragmaDeclaration):
    $(Pragma);
    $(Pragma) $(GLINK2 attribute, DeclarationBlock)

$(GNAME PragmaStatement):
    $(Pragma);
    $(Pragma) $(PSSEMI)

$(GNAME Pragma):
    $(D pragma) $(D $(LPAREN)) $(GLINK_LEX Identifier) $(D $(RPAREN))
    $(D pragma) $(D $(LPAREN)) $(GLINK_LEX Identifier) $(D ,) $(GLINK2 expression, ArgumentList) $(D $(RPAREN))
)


        $(P Pragmas pass special information to the implementation
        and can add vendor specific extensions.
        Pragmas can be used by themselves terminated with a `;`,
        and can apply to a statement, a block of statements, a declaration, or
        a block of declarations.
        )

        $(P $Pragmas can be either a $(GLINK PragmaDeclaration)
        or a $(GLINK PragmaStatement).
        )

-----------------
pragma(ident);        // just by itself

pragma(ident) declaration; // influence one declaration

pragma(ident): // influence subsequent declarations
    declaration;
    declaration;

pragma(ident)   // influence block of declarations
{
    declaration;
    declaration;
}

pragma(ident) statement; // influence one statement

pragma(ident)   // influence block of statements
{
    statement;
    statement;
}
-----------------

        $(P The kind of pragma it is determined by the $(I Identifier).
        $(GLINK2 expression, ArgumentList) is a comma-separated list of
        $(ASSIGNEXPRESSION)s. The $(ASSIGNEXPRESSION)s must be
        parsable as expressions, but their meaning
        is up to the individual pragma semantics.
        )

$(H2 $(LEGACY_LNAME2 Predefined-Pragmas, predefined-pragmas, Predefined Pragmas))

$(P All implementations must support these, even if by just ignoring them:)

$(UL
    $(LI $(LINK2 #crtctor, pragma crt$(UNDERSCORE)constructor))
    $(LI $(LINK2 #crtdtor, pragma crt$(UNDERSCORE)destructor))
    $(LI $(LINK2 #inline, pragma inline))
    $(LI $(LINK2 #lib, pragma lib))
    $(LI $(LINK2 #linkerDirective, pragma linkerDirective))
    $(LI $(LINK2 #mangle, pragma mangle))
    $(LI $(LINK2 #msg, pragma msg))
    $(LI $(LINK2 #printf, pragma printf))
    $(LI $(LINK2 #scanf, pragma scanf))
    $(LI $(LINK2 #startaddress, pragma startaddress))
)

    $(IMPLEMENTATION_DEFINED An implementation may ignore these pragmas.)

$(H3 $(LNAME2 crtctor, $(D pragma crt_constructor)))

    $(P This pragma must directly precede an $(D extern(C)) function declaration
        that must take no argument, even default ones.
        The function this pragma applies to will be inserted in `.init_array`
        or `.ctors`, depending on the target and compiler implementation.
        It is equivalent to GCC's $(LINK2 https://gcc.gnu.org/onlinedocs/gcc-4.7.0/gcc/Function-Attributes.html, `__attribute__((constructor))`).
    )
-----------------
__gshared int initCount;

pragma(crt_constructor)
extern(C) void initializer() { initCount += 1; }
-----------------

    $(P It is useful for system programming and interfacing with C/C++,
        for example to allow for initialization of the runtime when loading a DSO,
        or as a simple replacement for `shared static this` in
        $(DDLINK spec/betterc, betterC mode, betterC mode).
    )
    $(P A module may contain any number of functions annotated with `crt_constructor`.
        The order in which functions are called is undefined and shouldn't be relied upon.
        A function can be annotated as both `crt_constructor` and `crt_destructor` (see below).
        The runtime is not initialized when the function is called.
        This pragma does not take any argument and can only be applied to a single declaration,
        so using them in an $(GLINK2 grammar, AttributeSpecifier) is disallowed.
    )

    $(P `crt_constructor` and `crt_destructor` were implemented in
        $(LINK2 $(ROOT_DIR)changelog/2.078.0.html, v2.078.0 (2018-01-01)).
        Some compilers exposed non-standard, compiler-specific mechanism before.
    )

$(H3 $(LNAME2 crtdtor, $(D pragma crt_destructor)))

    $(P Similarly, `pragma(crt_destructor)` must also directly precede an `extern(C)`
        function declaration that must take no argument, even default ones.
        The function this pragma applies to will be inserted in `.fini_array`
        or `.dtors`, depending on the target and compiler implementation.
        It is equivalent to GCC's $(LINK2 https://gcc.gnu.org/onlinedocs/gcc-4.7.0/gcc/Function-Attributes.html, `__attribute__((destructor))`).
    )
-----------------
__gshared int initCount;

pragma(crt_constructor)
extern(C) void initialize() { initCount += 1; }

pragma(crt_destructor)
extern(C) void deinitialize() { initCount -= 1; }

pragma(crt_constructor)
pragma(crt_destructor)
extern(C) void innuendo() { printf("Inside a constructor... Or destructor?\n"); }
-----------------

    $(P The runtime might have been terminated and not be usable anymore when the destructors are called.
        Otherwise, usage and requirements of `crt_destructor` are similar to those of `crt_constructor`.
    )

$(H3 $(LNAME2 inline, $(D pragma inline)))

    $(P Affects whether functions are inlined or not. If at the declaration level, it
     affects the functions declared in the block it controls. If inside a function, it
     affects the function it is enclosed by.)

     $(P It takes two forms:)
     $(OL
        $(LI
---
pragma(inline)
---
        Sets the behavior to match the implementation's default behavior.
        )
        $(LI
---
pragma(inline, boolean_expression)
---
        If the expression evaluates to false the functions are never inlined, otherwise they are always inlined.
        )
      )

    $(P There can be only zero or one $(I AssignExpression)s. If one is there, it must
    be `true`, `false`, or an integer value. An integer value is implicitly converted
    to a bool.)

    $(P If there are multiple pragma inlines in a function,
    the lexically last one takes effect.)
---
pragma(inline):
int foo(int x) // foo() is never inlined
{
    pragma(inline, true);
    ++x;
    pragma(inline, false); // supercedes the others
    return x + 3;
}
---

    $(IMPLEMENTATION_DEFINED
    $(OL
    $(LI The default inline behavior is typically selectable with a compiler switch
    such as $(DDSUBLINK dmd, switch-inline, $(TT -inline).))
    $(LI Whether a particular function can be inlined or not is implementation defined.)
    $(LI What happens for `pragma(inline, true)` if the function cannot be inlined.
    An error message is typical.)
    ))

$(H3 $(LNAME2 lib, $(D pragma lib)))

    $(P There must be one $(ASSIGNEXPRESSION) and it must evaluate at compile time to a string literal.
    )
-----------------
pragma(lib, "foo.lib");
-----------------

    $(IMPLEMENTATION_DEFINED
    Typically, the string literal specifies the file name of a library file. This name
    is inserted into the generated object file, or otherwise is passed to the linker,
    so the linker automatically links in that library.
    )

$(H3 $(LNAME2 linkerDirective, $(D pragma linkerDirective)))

    $(P There must be one $(ASSIGNEXPRESSION) and it must evaluate at compile time to a string literal.
    )
-----------------
pragma(linkerDirective, "/FAILIFMISMATCH:_ITERATOR_DEBUG_LEVEL=2");
-----------------

    $(IMPLEMENTATION_DEFINED
    $(P The string literal specifies a linker directive to be embedded in the generated object file.)

    $(P Linker directives are only supported for MS-COFF output.)
    )

$(H3 $(LNAME2 mangle, $(D pragma mangle)))

    $(P Overrides the default mangling for a symbol.)

    $(P There must be one $(ASSIGNEXPRESSION) and it must evaluate at compile time to a string literal.
    )

    $(IMPLEMENTATION_DEFINED On macOS and Win32, an extra underscore (`_`) is prepended to the string
        since 2.079, as is done by the C/C++ toolchain. This allows using the same `pragma(mangle)`
        for all compatible (POSIX in one case, win64 in another) platforms instead of having to special-case.
    )

    $(IMPLEMENTATION_DEFINED It's only effective
        when the symbol is a function declaration or a variable declaration.
        For example this allows linking to a symbol which is a D keyword, which would normally
        be disallowed as a symbol name:
    )
-----------------
pragma(mangle, "body")
extern(C) void body_func();
-----------------


$(H3 $(LNAME2 msg, $(D pragma msg)))

    $(P Constructs a message from the $(I ArgumentList).)

-----------------
pragma(msg, "compiling...", 1, 1.0);
-----------------

    $(IMPLEMENTATION_DEFINED The arguments are typically presented to the user during compilation,
    such as by printing them to the standard error stream.)

$(H3 $(LNAME2 printf, $(D pragma printf)))

    $(P `pragma(printf)` specifies that a function declaration is a printf-like function, meaning
    it is an `extern (C)` or `extern (C++)` function with a `format` parameter accepting a
    pointer to a 0-terminated `char` string conforming to the C99 Standard 7.19.6.1, immediately followed
    by either a `...` variadic argument list or a parameter of type `va_list` as the last parameter.
    )

    $(P If the `format` argument is a string literal, it is verified to be a valid format string
    per the C99 Standard. If the `format` parameter is followed by `...`, the number and types
    of the variadic arguments are checked against the format string.)

    $(P Diagnosed incompatibilities are:)

    $(UL
    $(LI incompatible sizes which may cause argument misalignment)
    $(LI deferencing arguments that are not pointers)
    $(LI insufficient number of arguments)
    $(LI struct arguments)
    $(LI array and slice arguments)
    $(LI non-pointer arguments to `s` specifier)
    $(LI non-standard formats)
    $(LI undefined behavior per C99)
    )

    $(P Per the C99 Standard, extra arguments are ignored.)

    $(P Ignored mismatches are:)

    $(UL
    $(LI sign mismatches, such as printing an `int` with a `%u` format)
    $(LI integral promotion mismatches, where the format specifies a smaller integral
    type than `int` or `uint`, such as printing a `short` with the `%d` format rather than `%hd`)
    )

    ---
    printf("%k\n", value); // error: non-Standard format k
    printf("%d\n");        // error: not enough arguments
    printf("%d\n", 1, 2);  // ok, extra arguments ignored
    ---

    $(BEST_PRACTICE
    In order to use non-Standard printf/scanf formats, an easy workaround is:
    ---
    const format = "%k\n";
    printf(format.ptr, value);  // no error
    ---
    )

    $(BEST_PRACTICE
    Most of the errors detected are portability issues. For instance,

    ---
    string s;
    printf("%.*s\n", s.length, s.ptr);
    printf("%d\n", s.sizeof);
    ulong u;
    scanf("%lld%*c\n", &u);
    ---
    should be replaced with:
    ---
    string s;
    printf("%.*s\n", cast(int) s.length, s.ptr);
    printf("%zd\n", s.sizeof);
    ulong u;
    scanf("%llu%*c\n", &u);
    ---
    )

    $(P `pragma(printf)` applied to declarations that are not functions are ignored.
    In particular, it has no effect on the declaration of a pointer to function type.
    )


$(H3 $(LNAME2 scanf, $(D pragma scanf)))

    $(P `pragma(scanf)` specifies that a function declaration is a scanf-like function, meaning
    it is an `extern (C)` or `extern (C++)` function with a `format` parameter accepting a
    pointer to a 0-terminated `char` string conforming to the C99 Standard 7.19.6.2, immediately followed
    by either a `...` variadic argument list or a parameter of type `va_list` as the last parameter.
    )

    $(P If the `format` argument is a string literal, it is verified to be a valid format string
    per the C99 Standard. If the `format` parameter is followed by `...`, the number and types
    of the variadic arguments are checked against the format string.)

    $(P Diagnosed incompatibilities are:)

    $(UL
    $(LI argument is not a pointer to the format specified type)
    $(LI insufficient number of arguments)
    $(LI non-standard formats)
    $(LI undefined behavior per C99)
    )

    $(P Per the C99 Standard, extra arguments are ignored.)

    $(P `pragma(scanf)` applied to declarations that are not functions are ignored.
    In particular, it has no effect on the declaration of a pointer to function type.
    )




$(H3 $(LNAME2 startaddress, $(D pragma startaddress)))

    $(P There must be one $(ASSIGNEXPRESSION) and it must evaluate at compile time to a function symbol.)

    $(IMPLEMENTATION_DEFINED The function symbol specifies the start address for the program.
    The symbol is inserted into the object file or is otherwise presented to the linker to
    set the start address.
    This is not normally used for application level programming,
    but is for specialized systems work.
    For applications code, the start address is taken care of
    by the runtime library.

-----------------
void foo() { ... }
pragma(startaddress, foo);
-----------------

    )

$(H2 $(LNAME2 vendor_specific_pragmas, Vendor Specific Pragmas))

        $(P Vendor specific pragma $(I Identifier)s can be defined if they
        are prefixed by the vendor's trademarked name, in a similar manner
        to version identifiers:
        )

    ---
    pragma(DigitalMars_extension) { ... }
    ---

    $(P Implementations must diagnose an error for unrecognized $(I Pragma)s,
    even if they are vendor specific ones.
    )

    $(IMPLEMENTATION_DEFINED Vendor specific pragmas.)


    $(BEST_PRACTICE vendor
        specific pragmas should be wrapped in version statements

    ---
    version (DigitalMars)
    {
        pragma(DigitalMars_extension)
        {   ... }
    }
    ---
    )

$(SPEC_SUBNAV_PREV_NEXT attribute, Attributes, expression, Expressions)
)

Macros:
        CHAPTER=9
        TITLE=Pragmas
