Ddoc

$(D_S D Programming Language,

$(SECTION1 ,

$(DIVC intro, $(DIV, $(DIV,
    $(DIV,
        $(TC p, pitch, $(B D) is a general-purpose programming language with
        static typing, systems-level access, and C-like syntax.
        It combines efficiency, control and modeling power with safety
        and programmer productivity.)

        $(DIVC download,
            $(DIVC btn-group-vertical,
              <a href="download.html" class="btn">Downloads</a>
              $(SPANC smallprint, Latest version: $(LATEST)
                  &ndash; $(LINK2 changelog/$(LATEST).html, Changelog))
            )
        )
    )
    $(DIVID your-code-here,
        $(DIVCID fa-select, your-code-here-select-example,)
        $(DIVC tip,
            $(LINK2 https://forum.dlang.org/newpost/general?subject=%5Byour+code+here%5D, your code here)
            $(DIV,
                $(P Got a brief example illustrating D?)
                $(P Submit your code to the digitalmars.D forum specifying
                    "[your code here]" in the subject.)
                $(P Upon approval it will be showcased here on a random schedule.)
            )
        )
$(EXTRA_EXAMPLE_RUNNABLE Compute average line length for stdin,
$(RUNNABLE_EXAMPLE_STDIN
The D programming language
Modern convenience.
Modeling power.
Native efficiency.)
----
void main()
{
    import std.range, std.stdio;

    auto sum = 0.0;
    auto count = stdin.byLine
        .tee!(l => sum += l.length).walkLength;

    writeln("Average line length: ",
        count ? sum / count : 0);
}
----
)
$(EXTRA_EXAMPLE_RUNNABLE Round floating point numbers,
$(RUNNABLE_EXAMPLE_STDIN 2.4 plus 2.4 equals 5 for sufficiently large values of 2.)
----
import std.algorithm, std.conv, std.functional,
    std.math, std.regex, std.stdio;

alias round = pipe!(to!real, std.math.round, to!string);
static reFloatingPoint = ctRegex!`[0-9]+\.[0-9]+`;

void main()
{
    // Replace anything that looks like a real
    // number with the rounded equivalent.
    stdin
        .byLine
        .map!(l => l.replaceAll!(c => c.hit.round)
                                (reFloatingPoint))
        .each!writeln;
}
----
)
$(EXTRA_EXAMPLE_RUNNABLE Sort lines,
$(RUNNABLE_EXAMPLE_STDIN
Mercury
Venus
Earth
Mars
Jupiter
Saturn
Uranus
Neptune)
----
import std.stdio, std.array, std.algorithm;

void main()
{
    stdin
        .byLineCopy
        .array
        .sort!((a, b) => a > b) // descending order
        .each!writeln;
}
----
)
$(EXTRA_EXAMPLE_RUNNABLE Sort an Array at Compile-Time,
----
void main()
{
    import std.algorithm, std.conv, std.stdio;

    "Starting program".writeln;

    // Sort a constant declaration at Compile-Time
    enum a = [ 3, 1, 2, 4, 0 ];
    static immutable b = sort(a);

    // Print the result _during_ compilation
    pragma(msg, text("Finished compilation: ", b));
}
----
)
$(EXTRA_EXAMPLE_RUNNABLE Invoke external programs,
----
void main()
{
    import std.exception, std.stdio, std.process;

    auto result = ["whoami"].execute;
    enforce(result.status == 0);
    result.output.write;
}
----
)
$(EXTRA_EXAMPLE_RUNNABLE Print hex dump,
----
void main()
{
    import std.algorithm, std.stdio, std.file, std.range;
    enum cols = 14;
    // Split file into 14-byte chunks per row
    thisExePath.File("rb").byChunk(cols).take(20).each!(chunk =>
        // Use range formatting to format the
        // hexadecimal part and align the text part
        writefln!"%(%02X %)%*s  %s"(
            chunk,
            3 * (cols - chunk.length), "", // Padding
            chunk.map!(c => // Replace non-printable
                c < 0x20 || c > 0x7E ? '.' : char(c))));
}
----
)
$(EXTRA_EXAMPLE Start a minimal web server,
----
#!/usr/bin/env dub
/+ dub.sdl:
name "hello_vibed"
dependency "vibe-d" version="~>0.8.0"
+/
void main()
{
    import vibe.d;
    listenHTTP(":8080", (req, res) {
        res.writeBody("Hello, World: " ~ req.path);
    });
    runApplication();
}
----
)
$(EXTRA_EXAMPLE_RUNNABLE Initialize an Array in parallel,
----
void main()
{
    import std.datetime, std.math, std.parallelism, std.stdio;

    auto logs = new double[100_000];
    auto bm = benchmark!({
        foreach (i, ref elem; logs)
            elem = log(1.0 + i);
    }, {
        foreach (i, ref elem; logs.parallel)
            elem = log(1.0 + i);
    })(100); // number of executions of each tested function
    writefln("Linear init: %s msecs", bm[0].msecs);
    writefln("Parallel init: %s msecs", bm[1].msecs);
}
----
)
$(EXTRA_EXAMPLE_RUNNABLE Sort in-place across multiple arrays,
----
void main()
{
    import std.stdio : writefln;
    import std.algorithm.sorting : sort;
    import std.range : chain;

    int[] arr1 = [4, 9, 7];
    int[] arr2 = [5, 2, 1, 10];
    int[] arr3 = [6, 8, 3];
    // @nogc functions are guaranteed by the compiler
    // to be without any GC allocation
    () @nogc {
        sort(chain(arr1, arr2, arr3));
    }();
    writefln("%s\n%s\n%s\n", arr1, arr2, arr3);
}
----
)
$(EXTRA_EXAMPLE_RUNNABLE Count frequencies of all 2-tuples,
----
void main()
{
    import std.stdio : writefln;
    int[char[2]] aa;
    auto arr = "ABBBA";

    // Iterate over all pairs in the string and observe each pair
    // ('A', 'B'), ('B', 'B'), ('B', 'A'), ...
    // String slicing doesn't allocate a copy
    foreach (i; 0 .. arr.length - 1)
        aa[arr[i .. $][0 .. 2]]++;

    foreach (key, value; aa)
        writefln("key: %s, value: %d", key, value);
}
----
)
$(EXTRA_EXAMPLE_RUNNABLE Tiny RPN calculator,
$(RUNNABLE_EXAMPLE_STDIN 2 3 3 4 + * *)
----
void main()
{
    import std.stdio, std.string, std.algorithm, std.conv;

    // Reduce the RPN expression using a stack
    readln.split.fold!((stack, op)
    {
        switch (op)
        {
            // Generate operator switch cases statically
            static foreach (c; "+-*/")
                case [c]:
                    return stack[0 .. $ - 2] ~
                        mixin("stack[$ - 2] " ~ c ~
                            " stack[$ - 1]");
            default: return stack ~ op.to!real;
        }
    })((real[]).init).writeln;
}
----
)
$(EXTRA_EXAMPLE_RUNNABLE Generate a config parser at compile-time,
----
import std.algorithm, std.conv, std.range, std.stdio, std.traits;
struct Config {
    int a, b; string c;
}
void main() {
    Config conf;
    // use the generated parser for each entry
    "b=1,a=2,c=hello".splitter(",").each!(e => conf.parse(e));
    conf.writeln;
}
void parse(Conf)(ref Conf c, string entry) {
    auto r = entry.splitter("=");
    Switch: switch (r.front) {
        foreach (idx, _; c.tupleof) {
            case Conf.tupleof[idx].stringof:
                c.tupleof[idx] = r.dropOne.front
                    .to!(typeof(Conf.tupleof[idx]));
                break Switch;
        }
        default: assert (0, "Unknown member name.");
    }
}
----
)

) $(COMMENT your-code-here)
))) $(COMMENT intro, div, div)

$(COMMENT
Picking the frontpage example after the page has loaded leads to reflows
and re-rendering. Hence, we pick the example as soon as possible
)
$(SCRIPT
    (function() {
    // randomly pick one example and bootstrap the runnable editor
    var examples = document.getElementsByClassName('your-code-here-extra');
    var rouletteIndex = Math.floor(Math.random() * examples.length);
    var rouletteChild = examples[rouletteIndex];
    rouletteChild.style.display = "block";

    // build a list of the titles of all examples and add an option chooser to
    // allow switching between them
    var titles = Array.prototype.map.call(examples, function(e) {
        return e.getElementsByClassName("your-code-here-title")[0].innerText;
    });
    var sel = document.createElement("select");
    Array.prototype.forEach.call(titles, function(title, i) {
        var el = document.createElement("option");
        el.value = i;
        el.innerText = title;
        sel.appendChild(el);
    });
    sel.selectedIndex = rouletteIndex;
    sel.addEventListener("change", function(e) {
        examples[rouletteIndex].style.display = "none";
        rouletteIndex = sel.selectedIndex;
        examples[rouletteIndex].style.display = "block";
    });
    var selEl = document.getElementById("your-code-here-select-example");
    selEl.appendChild(sel);
    })();
)

$(DIVC more,

$(DIVID news,
    $(DIVID forum-summary,
    <iframe src="https://forum.dlang.org/frame-announcements"></iframe>
    <iframe src="https://forum.dlang.org/frame-discussions"></iframe>
    )
    $(DIVID twitter,
    <a class="twitter-timeline"  href="https://twitter.com/hashtag/dlang" data-widget-id="684452777939058688">#dlang Tweets</a>
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+"://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>

    )
    $(DIVID dconf,
        $(LINK2 http://dconf.org/2017/index.html,
            <img src="$(ROOT_DIR)images/dconf_logo_2017.svg" style="max-width:100%; padding-top: 1.5em" />
        )
        <div style="font-size: 12px">
        $(P $(LINK2 http://dconf.org/2017/index.html, DConf 2017)
            has successfully concluded!
        )
        $(P
            Whether you were with us in Berlin or watching from
            home, we thank everyone for participating. You can
            review the conference through $(LINK2
            http://youtube.com/playlist?list=PL3jwVPmk_PRxo23yyoc0Ip_cP3-rCm7eB,
            this YouTube playlist).
        )
        </div>
    )
)

$(DIVC boxes,
    $(DIVC row,
        $(TOUR newspaper-o, News,
            $(P Stay updated with lastest article in the
                $(LINK2 http://blog.dlang.org,
                    <cite>Official D Blog</cite>) from $(DBLOG_LATEST_DATE):
                $(LINK2 $(DBLOG_LATEST_LINK), $(DBLOG_LATEST_TITLE)) by
                $(DBLOG_LATEST_AUTHOR).
            )
           $(P Browse weekly summaries in
               $(LINK2 http://arsdnet.net/this-week-in-d,
                   <cite>This Week in D</cite>) -
                $(LINK2 $(TWID_LATEST_LINK), $(TWID_LATEST_DATE)):
                $(TWID_LATEST_TITLE)
            )
        )
        $(TOUR graduation-cap, Learn,
            $(P Take the $(LINK2 https://tour.dlang.org,
                Tour), explore
                $(LINK2 $(ROOT_DIR)overview.html, major features) in D,
                quick start with $(LINK2 $(ROOT_DIR)ctod.html, C) or
                $(LINK2 $(ROOT_DIR)cpptod.html, C++) background,
                setup your $(LINK2 https://wiki.dlang.org/IDEs, IDE) or
                $(LINK2 https://wiki.dlang.org/Editors, editor),
                and ask questions in the
                $(LINK2 https://forum.dlang.org/group/digitalmars.D.learn,
                    Learn forum).
            )
            $(P For a deeper dive into D
            	check out $(LINK2 https://wiki.dlang.org/Books, books) about D,
            	among others Ali Çehreli's
                $(LINK2 http://ddili.org/ders/d.en/index.html,
                <cite>Programming in D</cite>).
            )
        )
    )
    $(DIVC row,
        $(TOUR comments, Community,
            $(P Discuss D on the $(LINK2 https://forum.dlang.org/, forums), join
                the $(LINK2 irc://irc.freenode.net/d, IRC channel), read our
                $(LINK2 https://dlang.org/blog, official Blog), or follow us
                on $(LINK2 https://twitter.com/D_Programming, Twitter).
                Browse the $(LINK2 https://wiki.dlang.org/, wiki) where among
                other things you can find the
                $(LINK2 https://wiki.dlang.org/Vision/2017H2, high-level vision)
                of the $(LINK2 $(ROOT_DIR)foundation.html, D Language Foundation).
            )
        )
        $(TOUR book, Documentation,
            $(P Refer to the documentation for the
                $(LINK2 $(ROOT_DIR)spec/spec.html, language) and for
                $(LINK2 $(ROOT_DIR)phobos/index.html, phobos), D's standard
                library. The
                $(LINK2 $(ROOT_DIR)dmd.html, DMD manual) tells you how
                to use the compiler. Read
                $(LINK2 $(ROOT_DIR)articles.html, various articles) to deepen
                your understanding.
            )
        )
    )
    $(DIVC row,
        $(TOUR code-fork, Contribute,
            $(P Report any bugs you find to our $(LINK2 $(ROOT_DIR)bugstats.html,
                bug tracker). If you can fix an issue, make a pull request on
                $(LINK2 https://github.com/dlang, GitHub).
                There are $(LINK2 https://wiki.dlang.org/Get_involved, many other ways)
                to help, too!
            )
        )
        $(TOUR cubes, Packages,
            $(P DUB is the package manager for D.
                $(LINK2 https://code.dlang.org/getting_started,
                    Get started with DUB), and check out the
                $(LINK2 https://code.dlang.org/, available packages).
            )
        )
    )
)

$(DIVC whyd, $(SECTION2 Why D?,

$(DIVC section,
$(DIV, $(SECTION3 $(WHY_D_ICON magic) Convenience,

$(P D allows writing large code fragments without redundantly specifying types,
like dynamic languages do. On the other hand, static inference deduces types and other
code properties, giving the best of both the static and the
dynamic worlds. $(EXAMPLE 1,
----
void main()
{
    // Define an array of numbers, double[].
    // Compiler recognizes the common
    // type of all initializers.
    auto arr = [ 1, 2, 3.14, 5.1, 6 ];
    // Dictionary that maps string to int,
    // type is spelled int[string]
    auto dictionary = [ "one" : 1, "two" : 2,
        "three" : 3 ];
    // Calls the min function defined below
    auto x = min(arr[0], dictionary["two"]);
}
// Type deduction works for function results.
// This is important for generic functions,
// such as min below, which works correctly
// for all comparable types.
auto min(T1, T2)(T1 lhs, T2 rhs)
{
    return rhs < lhs ? rhs : lhs;
}
----

))

$(P Automatic memory management makes for safe, simple, and robust code.
D also supports scoped resource management (aka the
$(HTTPS en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization, RAII) idiom)
and $(LINK2 spec/statement.html#ScopeGuardStatement, $(D scope) statements) for
deterministic transactional code that is easy to write and read. $(EXAMPLE 2,

----
import std.stdio;

class Widget { }

void main()
{
    // Automatically managed.
    auto w = new Widget;
    // Code is executed in any case upon scope exit.
    scope(exit) { writeln("Exiting main."); }
    // File is closed deterministically at scope's end.
    foreach (line; File("text.txt").byLine())
    {
        writeln(line);
    }
    writeln();
}
----
)
)

$(P Built-in linear and associative arrays, slices, and ranges make daily
programming simple and pleasant for tasks, both small and large. $(EXAMPLE 3,
$(RUNNABLE_EXAMPLE_STDIN
The D programming language
Modern convenience.
Modeling power.
Native efficiency.)
----
// Compute average line length for stdin
void main()
{
    import std.range, std.stdio;

    auto sum = 0.0;
    auto count = stdin.byLine
        .tee!(l => sum += l.length).walkLength;

    writeln("Average line length: ",
        count ? sum / count : 0);
}
----
))

)))

$(DIVC section, $(DIV, $(SECTION3 $(WHY_D_ICON rocket) Power,

$(P The best paradigm is to not impose something at the expense of others.
D offers classic polymorphism, value semantics, functional
style, generics, generative programming, contract programming,
and more&mdash;all harmoniously integrated. $(EXAMPLE 4,
----
// Interfaces and classes
interface Printable
{
   void print(uint level)
   // contract is part of the interface
   in { assert(level > 0); }
}

// Interface implementation
class Widget : Printable
{
   void print(uint level)
   in{ }
   body{ }
}

// Single inheritance of state
class ExtendedWidget : Widget
{
   override void print(uint level)
   in { /* weakening precondition is okay */  }
   body
   {
       //... level may be 0 here ...
   }
}

// Immutable data shared across threads
immutable string programName = "demo";
// Mutable data is thread-local
int perThread = 42;
// Explicitly shared data
shared int perApp = 5;

// Structs have value semantics
struct BigNum
{
    // intercept copying
    this(this) { }
    // intercept destructor
    ~this() { }
}

void main()
{
    // ...
}
----
))

$(P D offers an innovative approach to concurrency, featuring true
immutable data, message passing, no sharing by default, and
controlled mutable sharing across threads. $(HTTP
informit.com/articles/article.aspx?p=1609144, Read more).)

$(P From simple scripts to large projects, D has the breadth
to scale with any application's needs: unit testing,
information hiding, refined modularity, fast compilation, precise
interfaces. $(HTTP drdobbs.com/high-performance-computing/217801225,
Read more).)

)))

$(DIVC section, $(DIV, $(SECTION3 $(WHY_D_ICON bolt) Efficiency,

$(P D compiles naturally to efficient native code.)

$(P D is designed such that most "obvious" code is fast $(I and)
safe. On occasion a function might need to escape the confines of type
safety for ultimate speed and control. For such rare cases D offers
native pointers, type casts, access to any C function without any
intervening translation, manual memory management, custom allocators
and even inline assembly code. $(EXAMPLE 5,
----
import core.stdc.stdlib;

void livingDangerously()
{
    // Access to C's malloc and free primitives
    auto buf = malloc(1024 * 1024);
    // free automatically upon scope exit
    scope(exit) free(buf);
    // Interprets memory as an array of floats
    auto floats = cast(float[]) buf[0 .. 1024 * 1024];
    // Even stack allocation is possible
    auto moreBuf = alloca(4096 * 100);
    //...
}

// Using inline asm for extra speed on x86
uint checked_multiply(uint x, uint y)
{
    uint result;
    version (D_InlineAsm_X86)
    {
        // Inline assembler "sees" D variables.
        asm
        {
            mov     EAX,x        ;
            mul     EAX,y        ;
            mov     result,EAX   ;
            jc      Loverflow    ;
        }
        return result;
    }
    else
    {
        result = x * y;
        if (!y || x <= uint.max / y)
           return result;
   }
Loverflow:
   throw new Exception("multiply overflow");
}

void main()
{
    // ...
}
----
))

$(P The $(D @safe), $(D @trusted), and $(D @system) function
attributes allow the programmer to best decide the safety-efficiency
tradeoffs of an application, and have the compiler check for
consistency. $(LINK2 spec/memory-safe-d.html, Read more).)

)))

$(DIVC section, $(DIV, $(SECTION3 $(WHY_D_ICON industry) Industry-proven,
$(DIVC frontpage-orgs center,
    $(FRONTPAGE_ORG eBay, https://www.ebay.com, ebay.jpg,
        One of the world’s largest marketplaces
    )
    $(FRONTPAGE_ORG Netflix, https://www.netflix.com, netflix.jpg,
        Video-on-demand streaming platform
    )
    $(FRONTPAGE_ORG Sociomantic, https://www.sociomantic.com, sociomantic.png,
        Real-time personalized advertising
    )
    $(FRONTPAGE_ORG Remedy Games, http://www.remedygames.com, remedy.png,
        Triple-A game development
    )
)
    <div id="frontpage-orgs-more">
        <i class="fa fa-angle-double-right" aria-hidden="true"></i>
        $(LINK2 $(ROOT_DIR)areas-of-d-usage.html, Current D use)
        $(BR)
        <i class="fa fa-angle-double-right" aria-hidden="true"></i>
        $(LINK2 $(ROOT_DIR)orgs-using-d.html, More organizations using D)
    </div>
)))



)) $(COMMENT SECTION2 Why D?, DIVC whyd)
) $(COMMENT more)
) $(COMMENT SECTION1)
) $(COMMENT D_S)

Macros:
    TITLE=Home
    TAG=<$1>$+</$1>
    TAG2=<$1 $2>$3</$1>
    D=<span class="d_inlinecode">$0</span>
    EXAMPLE=$(TAG2 a, id="a$1-control" class="example-control", )$(TAG2 div, id="a$1" class="example-box", $(RUNNABLE_EXAMPLE $2))
    EXTRA_EXAMPLE=<div class="your-code-here-extra" style="display:none">
        $(DIVC your-code-here-title, $1)
        $+
    </div>
    EXTRA_EXAMPLE_RUNNABLE=$(EXTRA_EXAMPLE $1, $(RUNNABLE_EXAMPLE $+))
    _=
    LAYOUT_PREFIX=
    LAYOUT_SUFFIX=
    $(SCRIPTLOAD $(ROOT_DIR)js/platform-downloads.js,  data-latest="$(LATEST)")
    LAYOUT_TITLE=
    TOUR=$(DIVC item, $(SECTION4 $(LINK2 $1, $(TC i, fa fa-$2 big-icon)$3), $4))
    TOUR=$(DIVC item, $(SECTION4 $(TC i, fa fa-$1 big-icon)$2, $3))
    WHY_D_ICON=$(TC i, fa fa-$1 why-d-icon)
    _=
	FRONTPAGE_ORG_IMG=$(DIVC frontpage-orgs-img-wrapper vcontainer-box, <img class="vcontainer-element" src="$(ROOT_DIR)images/orgs-using-d/$0" />)
    FRONTPAGE_ORG=$(DIVC frontpage-orgs-cell dont-highlight-link donthyphenate, $(LINK2 $2, $(FRONTPAGE_ORG_IMG $3)) $(H3 $1) $(P $(I $4 )))
    _= Single word inline CSS needs to be escaped _=
    C_A=$1:$2;
    META_DESCRIPTION=D is a general-purpose programming language with static typing, systems-level access, and C-like syntax.
    EXTRA_HEADERS=$(T style,
        .why-d-icon {
            padding-right: 0.2em;
        }
        .frontpage-orgs h3 {
           $(C_A margin, 0.4em)
           margin-left: 0;
           margin-right: 0;
           text-align: center;
        }
        .frontpage-orgs-img-wrapper {
            $(C_A width, 175px)
            $(C_A height, 75px)
            padding-bottom: 10px;
            text-align: center;
        }
        .frontpage-orgs img {
            max-width: 150px;
            max-height: 75px;
        }
        .frontpage-orgs-cell {
            $(C_A width, 175px)
            $(C_A display, inline-block)
            vertical-align: top;
            margin-bottom: 0.5em;
            padding-right: 15px;
        }
        #frontpage-orgs-more {
            text-align: right;
            padding-right: 0.7em;
            margin-bottom: -0.5em;
        }
    )
    $(COMMENT index.html only for now, until we can figure out
              how to generate a URL to the current page for og:url)
    <meta property="og:title" content="$(FULL_TITLE)" />
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://dlang.org/" />
    <meta property="og:image" content="https://dlang.org/images/dlogo_opengraph.png" />
    <meta property="og:description" content="$(META_DESCRIPTION)" />
